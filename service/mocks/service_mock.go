// Code generated by MockGen. DO NOT EDIT.
// Source: service/service.go

// Package servicemocks is a generated GoMock package.
package servicemocks

import (
	context "context"
	model "redis/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetHuman mocks base method.
func (m *MockService) GetHuman(ctx context.Context, id string) (*model.Human, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHuman", ctx, id)
	ret0, _ := ret[0].(*model.Human)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHuman indicates an expected call of GetHuman.
func (mr *MockServiceMockRecorder) GetHuman(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHuman", reflect.TypeOf((*MockService)(nil).GetHuman), ctx, id)
}

// GetHumans mocks base method.
func (m *MockService) GetHumans(ctx context.Context) (*model.Humans, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHumans", ctx)
	ret0, _ := ret[0].(*model.Humans)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHumans indicates an expected call of GetHumans.
func (mr *MockServiceMockRecorder) GetHumans(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHumans", reflect.TypeOf((*MockService)(nil).GetHumans), ctx)
}
